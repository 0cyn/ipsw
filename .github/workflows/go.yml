name: Go
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  # download:
  #   runs-on: macos-12
  #   steps:
  #     - name: Cache beta IPSW
  #       id: cache-beta-ipsw
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/beta
  #         key: beta-ipsw
  #     - name: Download beta IPSW
  #       if: steps.cache-beta-ipsw.outputs.cache-hit != 'true'
  #       run: |
  #         mkdir ~/beta
  #         wget -O ~/beta/beta.ipsw https://archive.org/download/iPhone142_16.0_20A5283p_Restore.ipsw/iPhone142_16.0_20A5283p_Restore.ipsw
  #     - name: Upload beta IPSW
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: beta-ipsw
  #         path: ~/beta/beta.ipsw
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-12, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      #
      # CACHE
      #
      # - name: Cache beta IPSW
      #   id: cache-beta-ipsw
      #   if: matrix.platform == 'macos-12'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/beta
      #     key: beta-ipsw
      # - name: Download beta IPSW from Artifacts
      #   if: matrix.platform == 'macos-12' && steps.cache-beta-ipsw.outputs.cache-hit != 'true'
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: beta-ipsw
      #     path: ~/beta/beta.ipsw
      # - name: Cache Downloaded IPSWs
      #   id: cache-ipsws
      #   if: matrix.platform == 'macos-12'
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.ipsw
      #     key: ${{ runner.os }}-${{ hashFiles('**/*.ipsw') }}
      - name: Cache go.mod (macOS)
        if: matrix.platform == 'macos-12'
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      #
      # Dependencies
      #
      - name: Get dependencies
        run: |
          go mod download
      - name: Build Dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get -yq install libusb-dev
      - name: Build Dependencies (macOS)
        if: matrix.platform == 'macos-12'
        run: |
          brew install tree
      - name: Build Dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          iwr get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH

      #
      # BUILD
      #
      - name: Build (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          CGO_ENABLED=1 go build -o /tmp/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (macOS)
        if: matrix.platform == 'macos-12'
        run: sudo CGO_ENABLED=1 go build -o /tmp/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          CGO_LDFLAGS: -LD:\a\ipsw\ipsw\lzfse\build\Debug
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          go build -o build/dist/ipsw.exe -ldflags "-linkmode external -extldflags -static" ./cmd/ipsw
          dir build/dist
          dir

      #
      # Package Installers
      #
      - name: Package Installers (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          scoop bucket add blacktop https://github.com/blacktop/scoop-bucket.git 
          scoop install blacktop/ipsw 
          ipsw --help
      - name: Package Installers (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo snap install ipsw
          ipsw --help
      - name: Package Installers (macOS)
        if: matrix.platform == 'macos-12'
        run: |
          brew install blacktop/tap/ipsw
          ipsw --help

      #
      # (Windows)
      #
      - name: Run Device List (Windows)
        if: matrix.platform == 'windows-latest'
        run: D:\a\ipsw\ipsw\build\dist\ipsw.exe device-list

      - name: Run Extract Remote Kernelcache (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          D:\a\ipsw\ipsw\build\dist\ipsw.exe -V download ipsw --kernel --latest -d iPhone12,1 --insecure
          dir

      #
      # (Unix)
      #
      - name: Run Device List
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-12'
        run: /tmp/ipsw device-list

      - name: Get Latest Version
        id: get-latest
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-12'
        run: |
          echo "latest_ios_version=$(/tmp/ipsw download ipsw --show-latest --insecure)" >> $GITHUB_ENV
          echo "latest_macos_version=$(/tmp/ipsw download ipsw --show-latest --macos --insecure)" >> $GITHUB_ENV
          echo "LATEST iOS VERSION: ${{ env.latest_ios_version }}"
          echo "LATEST macOS VERSION: ${{ env.latest_macos_version }}"
      - name: Make cache folders
        if: matrix.platform == 'macos-12'
        run: |
          mkdir -p ~/.ipsw
          mkdir -p ~/.ipsw-beta

      #
      # DOWNLOAD CMD (macOS)
      #
      - name: Run download latest (IPSW)
        if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
        working-directory: ~/.ipsw
        run: /tmp/ipsw download ipsw --confirm --device iPhone12,1 --latest
      - name: Run download latest (kernelcache)
        if: matrix.platform == 'macos-12'
        run: |
          /tmp/ipsw download ipsw --confirm --device iPhone12,1 --latest --kernel
          /tmp/ipsw -V macho info "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache*
      - name: Run download latest (PATTERN/iBoot)
        if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
        working-directory: ~/.ipsw
        run: /tmp/ipsw download ipsw --confirm --device iPhone12,1 --latest --pattern iBoot
      - name: Run download tss
        if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
        working-directory: ~/.ipsw
        run: /tmp/ipsw download tss --signed "${{ env.latest_ios_version }}"
      - name: Run download rss
        if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
        working-directory: ~/.ipsw
        run: /tmp/ipsw download rss
        # BETA ##########################################
      - name: Run download iOS beta OTA (kernelcache and DSC)
        if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
        working-directory: ~/.ipsw-beta
        run: /tmp/ipsw download ota --platform ios --device iPhone15,2 --beta --kernel --dyld
      # - name: Run download macOS beta OTA (kernelcache and DSC)
      #   if: matrix.platform == 'macos-12' && steps.cache-ipsws.outputs.cache-hit != 'true'
      #   working-directory: ~/.ipsw-beta
      #   run: /tmp/ipsw download ota --platform macos --device Mac14,7 --beta --kernel --dyld --dyld-arch arm64e --version 13.1

      #
      # INFO CMD (macOS)
      #
      - name: Run info
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw info *.ipsw

      #
      # EXTRACT CMD (macOS)
      #
      - name: Run extract - (kernel, dsc and dtree)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw extract --kernel --dyld --dtree --iboot --sep *.ipsw

      #
      # MDEVs CMD (macOS)
      #
      - name: Run mdevs
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw mdevs *.ipsw

      #
      # KERNEL CMD (macOS)
      #
      - name: Run kernel version
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw ipsw kernel version "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.* --json | jq .
      - name: Run kernel symbolsets
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw ipsw kernel symbolsets "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.*
      - name: Run kernel syscall
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw ipsw kernel syscall "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.*
      - name: Run kernel kexts
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw ipsw kernel kexts "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.*
      - name: Run kernel sbopts
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw ipsw kernel sbopts "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.*
      - name: Run kernel extract (KEXTs)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: |
          /tmp/ipsw kernel extract "${{ env.latest_ios_version }}_iPhone12,1"/kernelcache.release.* --all --output /tmp/KEXTS
          cd /tmp/KEXTS && ls -1 | xargs codesign -s - -f

      #
      # DYLD CMD (macOS)
      #
      - name: Run dyld info
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld info */dyld_shared_cache_arm64e --dylibs --sig -V
      - name: Run dyld symaddr (img)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld symaddr */dyld_shared_cache_arm64e --image libsystem_c.dylib
      - name: Run dyld symaddr (sym)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld symaddr */dyld_shared_cache_arm64e _memcpy
      - name: Run dyld symaddr (img+sym)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld symaddr ~/.ipsw/*/dyld_shared_cache_arm64e --image libsystem_c.dylib _memcpy
      - name: Run dyld symaddr (JSON)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: |
          echo '[{"regex":".*zero.*", "image":"libsystem_c.dylib"}]' > dyld_symaddr.json
          /tmp/ipsw dyld symaddr */dyld_shared_cache_arm64e --in dyld_symaddr.json
      # - name: Run dyld symaddr (ALL)
      #   if: matrix.platform == 'macos-12'
      #   run: |
      #     /tmp/ipsw dyld symaddr ~/.ipsw/*/dyld_shared_cache_arm64e | grep _memcpy
      - name: Run dyld macho
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld macho ~/.ipsw/*/dyld_shared_cache_arm64e JavaScriptCore --loads --objc --objc-refs --strings --symbols --starts --stubs -V
      - name: Run dyld macho (extract)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld macho ~/.ipsw/*/dyld_shared_cache_arm64e JavaScriptCore --extract
      - name: Run dyld webkit
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld webkit ~/.ipsw/*/dyld_shared_cache_arm64e --git --api ${{ secrets.GITHUB_TOKEN }}
      - name: Run dyld slide
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld slide ~/.ipsw/*/dyld_shared_cache_arm64e --auth
      - name: Run dyld patches
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld patches ~/.ipsw/*/dyld_shared_cache_arm64e
      - name: Run dyld imports
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld imports ~/.ipsw/*/dyld_shared_cache_arm64e JavaScriptCore
      - name: Run dyld disass
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld disass ~/.ipsw/*/dyld_shared_cache_arm64e --demangle --symbol _NSLog
      - name: Run dyld objc sel --image
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld objc sel ~/.ipsw/*/dyld_shared_cache_arm64e --image JavaScriptCore
      - name: Run dyld objc --class
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld objc --class ~/.ipsw/*/dyld_shared_cache_arm64e
      # - name: Run dyld objc --imp-cache
      #   if: matrix.platform == 'macos-12'
      #   run: |
      #     /tmp/ipsw dyld objc --imp-cache ~/.ipsw/*/dyld_shared_cache_arm64e
      - name: Run dyld objc --proto
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw dyld objc --proto ~/.ipsw/*/dyld_shared_cache_arm64e
      - name: Run dyld split (Xcode)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: |
          /tmp/ipsw dyld split --xcode /Applications/Xcode_14.1.app ~/.ipsw/*/dyld_shared_cache_arm64e ~/.ipsw
          tree ~/.ipsw

      #
      # MACHO CMD (macOS)
      #
      - name: Run macho info
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw macho info ./System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore --ent --header --loads --starts --strings --symbols
      - name: Run macho info (ObjC)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw macho info /System/Library/PrivateFrameworks/ApplePushService.framework/apsd --arch arm64e --objc --objc-refs --fixups
      - name: Run macho info (Dump Cert)
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: |
          /tmp/ipsw macho info /System/Library/PrivateFrameworks/ApplePushService.framework/apsd --arch arm64e --dump-cert --output /tmp
          openssl crl2pkcs7 -nocrl -certfile /tmp/apsd.pem | openssl pkcs7 -print_certs -text
      - name: Run macho disass
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw macho disass ./System/Library/Frameworks/Foundation.framework/Foundation --symbol _NSLog
      - name: Run lipo
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: /tmp/ipsw macho lipo /bin/ls --output /tmp --arch x86_64
      # #
      # # ENT CMD (macOS)
      # #
      # - name: Run ents
      #   if: matrix.platform == 'macos-12'
      #   run: |
      #     export PATH=$PWD/build/dist:$PATH
      #     cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw ent *.ipsw --ent platform-application

      #
      # UPDATE CMD (macOS)
      #
      - name: Run ipsw update
        if: matrix.platform == 'macos-12'
        working-directory: ~/.ipsw
        run: |
          /tmp/ipsw update --platform windows_x86_64 -V --api ${{ secrets.GITHUB_TOKEN }}
          /tmp/ipsw update --detect --api ${{ secrets.GITHUB_TOKEN }}

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: Releases
      #     path: build/dist/
