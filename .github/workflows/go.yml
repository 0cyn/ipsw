name: Go
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14.5
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Build Dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y cmake libtool libc6-dev
          cd /tmp
          git clone -b next https://github.com/aquynh/capstone.git
          cd capstone
          CAPSTONE_ARCHS="arm aarch64 x86" ./make.sh
          sudo ./make.sh install
      - name: Build Dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew update
          brew install capstone --HEAD
      # - name: Build Dependencies (Windows)
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     git clone https://github.com/lzfse/lzfse.git
      #     cd lzfse
      #     mkdir build
      #     cd build
      #     cmake -G "Visual Studio 16 2019" ..
      #     cmake --build . --config Debug
      #     cd Debug
      #     dlltool --def D:\a\ipsw\ipsw\hack\windows\lzfse.def --dllname lzfse.dll --output-lib lzfse.a

      - name: Get dependencies
        run: |
          go mod download

      - name: Build (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
          CGO_ENABLED=1 go build -o build/dist/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion=$(cat VERSION) -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (macOS)
        if: matrix.platform == 'macos-latest'
        run: sudo CGO_ENABLED=1 go build -o build/dist/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion=$(cat VERSION) -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          CGO_LDFLAGS: -LD:\a\ipsw\ipsw\lzfse\build\Debug
        run: |
          go build -o build/dist/ipsw.exe -ldflags "-linkmode external -extldflags -static" ./cmd/ipsw
          dir build/dist
          dir

      - name: Run Help
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw --help
      - name: Run Help (Windows)
        if: matrix.platform == 'windows-latest'
        run: D:\a\ipsw\ipsw\build\dist\ipsw.exe --help

      - name: Run Device List
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw device-list
      - name: Run Device List (Windows)
        if: matrix.platform == 'windows-latest'
        run: D:\a\ipsw\ipsw\build\dist\ipsw.exe device-list

      - name: Run Extract Remote Kernelcache
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw -V download kernel -v 13.6 -d iPhone12,3
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw -V macho iPhone*/kernelcache*
      - name: Run Extract Remote Kernelcache (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          D:\a\ipsw\ipsw\build\dist\ipsw.exe -V download kernel -v 13.6 -d iPhone12,3
          dir

      - uses: actions/upload-artifact@v2
        with:
          name: Releases
          path: build/dist/
