//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·__lzfse_decode_scratch_size(SB), $0-8

    MOVQ result+0(FP), DI

    LONG $0x00b908b8; BYTE $0x00 // mov    eax, 47368
    RET




TEXT ·__lzfse_decode_buffer_with_scratch(SB), $88-40

    MOVQ dstBuffer+0(FP), DI
    MOVQ dstSize+8(FP), SI
    MOVQ srcBuffer+16(FP), DX
    MOVQ srcSize+24(FP), CX
    MOVQ scratchBuffer+32(FP), R8
    ADDQ $8, SP

    WORD $0xc031                 // xor    eax, eax
    LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // mov    r9, -1
    LONG $0x247c8948; BYTE $0x40 // mov    qword [rsp + 64], rdi
    LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
    LONG $0x24548948; BYTE $0x30 // mov    qword [rsp + 48], rdx
    LONG $0x244c8948; BYTE $0x28 // mov    qword [rsp + 40], rcx
    LONG $0x2444894c; BYTE $0x20 // mov    qword [rsp + 32], r8
    LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
    LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
    LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
    WORD $0x8948; BYTE $0xcf     // mov    rdi, rcx
    WORD $0xc689                 // mov    esi, eax
    LONG $0x00b908ba; BYTE $0x00 // mov    edx, 47368
    WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	CALL ___memset_chk
    LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    WORD $0x8948; BYTE $0x0a     // mov    qword [rdx], rcx
    LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    LONG $0x084a8948             // mov    qword [rdx + 8], rcx
    LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
    WORD $0x8b48; BYTE $0x09     // mov    rcx, qword [rcx]
    LONG $0x244c0348; BYTE $0x28 // add    rcx, qword [rsp + 40]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    LONG $0x104a8948             // mov    qword [rdx + 16], rcx
    LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    LONG $0x184a8948             // mov    qword [rdx + 24], rcx
    LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    LONG $0x204a8948             // mov    qword [rdx + 32], rcx
    LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
    LONG $0x244c0348; BYTE $0x38 // add    rcx, qword [rsp + 56]
    LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
    LONG $0x284a8948             // mov    qword [rdx + 40], rcx
    LONG $0x247c8b48; BYTE $0x18 // mov    rdi, qword [rsp + 24]
    LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	CALL _lzfse_decode
    LONG $0x14244489             // mov    dword [rsp + 20], eax
    LONG $0x14247c83; BYTE $0xfe // cmp    dword [rsp + 20], -2
	JNE LBB1_2
    LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
    LONG $0x24448948; BYTE $0x48 // mov    qword [rsp + 72], rax
	JMP LBB1_5
LBB1_2:
    LONG $0x14247c83; BYTE $0x00 // cmp    dword [rsp + 20], 0
	JE LBB1_4
    QUAD $0x000000482444c748; BYTE $0x00 // mov    qword [rsp + 72], 0
	JMP LBB1_5
LBB1_4:
    LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
    LONG $0x18408b48             // mov    rax, qword [rax + 24]
    LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
    WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
    LONG $0x24448948; BYTE $0x48 // mov    qword [rsp + 72], rax
LBB1_5:
    LONG $0x24448b48; BYTE $0x48 // mov    rax, qword [rsp + 72]
    SUBQ $8, SP
    RET




TEXT ·__lzfse_decode_buffer(SB), $72-40

    MOVQ dstBuffer+0(FP), DI
    MOVQ dstSize+8(FP), SI
    MOVQ srcBuffer+16(FP), DX
    MOVQ srcSize+24(FP), CX
    MOVQ scratchBuffer+32(FP), R8
    ADDQ $8, SP

    LONG $0x247c8948; BYTE $0x30 // mov    qword [rsp + 48], rdi
    LONG $0x24748948; BYTE $0x28 // mov    qword [rsp + 40], rsi
    LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
    LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
    LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8
    QUAD $0x000000000c2444c7     // mov    dword [rsp + 12], 0
    QUAD $0x000000002404c748     // mov    qword [rsp], 0
    LONG $0x247c8348; WORD $0x0010 // cmp    qword [rsp + 16], 0
	JNE LBB2_2
	CALL _lzfse_decode_scratch_size
    LONG $0x01c08348             // add    rax, 1
    WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	CALL _malloc
    LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
    QUAD $0x000000010c2444c7     // mov    dword [rsp + 12], 1
LBB2_2:
    LONG $0x247c8348; WORD $0x0010 // cmp    qword [rsp + 16], 0
	JNE LBB2_4
    QUAD $0x000000382444c748; BYTE $0x00 // mov    qword [rsp + 56], 0
	JMP LBB2_7
LBB2_4:
    LONG $0x247c8b48; BYTE $0x30 // mov    rdi, qword [rsp + 48]
    LONG $0x24748b48; BYTE $0x28 // mov    rsi, qword [rsp + 40]
    LONG $0x24548b48; BYTE $0x20 // mov    rdx, qword [rsp + 32]
    LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
    LONG $0x24448b4c; BYTE $0x10 // mov    r8, qword [rsp + 16]
	CALL _lzfse_decode_buffer_with_scratch
    LONG $0x24048948             // mov    qword [rsp], rax
    LONG $0x0c247c83; BYTE $0x00 // cmp    dword [rsp + 12], 0
	JE LBB2_6
    LONG $0x247c8b48; BYTE $0x10 // mov    rdi, qword [rsp + 16]
	CALL _free
LBB2_6:
    LONG $0x24048b48             // mov    rax, qword [rsp]
    LONG $0x24448948; BYTE $0x38 // mov    qword [rsp + 56], rax
LBB2_7:
    LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
    SUBQ $8, SP
    RET
