// Code generated by "stringer -type=platform,tool,diceKind -output macho_string.go"; DO NOT EDIT.

package macho

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[macOS-1]
	_ = x[iOS-2]
	_ = x[tvOS-3]
	_ = x[watchOS-4]
	_ = x[bridgeOS-5]
	_ = x[macCatalyst-6]
	_ = x[iOSSimulator-7]
	_ = x[tvOSSimulator-8]
	_ = x[watchOSSimulator-9]
	_ = x[driverKit-10]
}

const _platform_name = "unknownmacOSiOStvOSwatchOSbridgeOSmacCatalystiOSSimulatortvOSSimulatorwatchOSSimulatordriverKit"

var _platform_index = [...]uint8{0, 7, 12, 15, 19, 26, 34, 45, 57, 70, 86, 95}

func (i platform) String() string {
	if i >= platform(len(_platform_index)-1) {
		return "platform(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _platform_name[_platform_index[i]:_platform_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[clang-1]
	_ = x[swift-2]
	_ = x[ld-3]
}

const _tool_name = "clangswiftld"

var _tool_index = [...]uint8{0, 5, 10, 12}

func (i tool) String() string {
	i -= 1
	if i >= tool(len(_tool_index)-1) {
		return "tool(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _tool_name[_tool_index[i]:_tool_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DiceKindData-1]
	_ = x[DiceKindJumpTable8-2]
	_ = x[DiceKindJumpTable16-3]
	_ = x[DiceKindJumpTable32-4]
	_ = x[DiceKindAbsJumpTable32-5]
}

const _diceKind_name = "DiceKindDataDiceKindJumpTable8DiceKindJumpTable16DiceKindJumpTable32DiceKindAbsJumpTable32"

var _diceKind_index = [...]uint8{0, 12, 30, 49, 68, 90}

func (i diceKind) String() string {
	i -= 1
	if i >= diceKind(len(_diceKind_index)-1) {
		return "diceKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _diceKind_name[_diceKind_index[i]:_diceKind_index[i+1]]
}
