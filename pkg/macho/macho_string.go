// Code generated by "stringer -type=platform,tool,diceKind,segFlag -output macho_string.go"; DO NOT EDIT.

package macho

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[macOS-1]
	_ = x[iOS-2]
	_ = x[tvOS-3]
	_ = x[watchOS-4]
	_ = x[bridgeOS-5]
	_ = x[macCatalyst-6]
	_ = x[iOSSimulator-7]
	_ = x[tvOSSimulator-8]
	_ = x[watchOSSimulator-9]
	_ = x[driverKit-10]
}

const _platform_name = "unknownmacOSiOStvOSwatchOSbridgeOSmacCatalystiOSSimulatortvOSSimulatorwatchOSSimulatordriverKit"

var _platform_index = [...]uint8{0, 7, 12, 15, 19, 26, 34, 45, 57, 70, 86, 95}

func (i platform) String() string {
	if i >= platform(len(_platform_index)-1) {
		return "platform(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _platform_name[_platform_index[i]:_platform_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[clang-1]
	_ = x[swift-2]
	_ = x[ld-3]
}

const _tool_name = "clangswiftld"

var _tool_index = [...]uint8{0, 5, 10, 12}

func (i tool) String() string {
	i -= 1
	if i >= tool(len(_tool_index)-1) {
		return "tool(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _tool_name[_tool_index[i]:_tool_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KindData-1]
	_ = x[KindJumpTable8-2]
	_ = x[KindJumpTable16-3]
	_ = x[KindJumpTable32-4]
	_ = x[KindAbsJumpTable32-5]
}

const _diceKind_name = "KindDataKindJumpTable8KindJumpTable16KindJumpTable32KindAbsJumpTable32"

var _diceKind_index = [...]uint8{0, 8, 22, 37, 52, 70}

func (i diceKind) String() string {
	i -= 1
	if i >= diceKind(len(_diceKind_index)-1) {
		return "diceKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _diceKind_name[_diceKind_index[i]:_diceKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SG_HIGHVM-1]
	_ = x[SG_FVMLIB-2]
	_ = x[SG_NORELOC-4]
	_ = x[SG_PROTECTED_VERSION_1-8]
	_ = x[SG_READ_ONLY-16]
}

const (
	_segFlag_name_0 = "SG_HIGHVMSG_FVMLIB"
	_segFlag_name_1 = "SG_NORELOC"
	_segFlag_name_2 = "SG_PROTECTED_VERSION_1"
	_segFlag_name_3 = "SG_READ_ONLY"
)

var (
	_segFlag_index_0 = [...]uint8{0, 9, 18}
)

func (i segFlag) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _segFlag_name_0[_segFlag_index_0[i]:_segFlag_index_0[i+1]]
	case i == 4:
		return _segFlag_name_1
	case i == 8:
		return _segFlag_name_2
	case i == 16:
		return _segFlag_name_3
	default:
		return "segFlag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
